package com.pandama.top.app.controller;

import cn.hutool.core.date.StopWatch;
import com.alibaba.fastjson.JSON;
import com.baomidou.mybatisplus.core.toolkit.IdWorker;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.pandama.top.core.global.response.Response;
import com.pandama.top.milvus.utils.MilvusUtils;
import io.milvus.response.QueryResultsWrapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Stream;

/**
 * milvus控制器
 *
 * @author 王强
 * @date 2023-07-08 11:55:46
 */
@Validated
@Slf4j
@RestController
@RequestMapping("/milvus")
@RequiredArgsConstructor(onConstructor_ = {@Autowired})
public class MilvusController {

    private final MilvusUtils milvusUtils;

    @RequestMapping(value = "/search", method = RequestMethod.GET)
    public Response<?> search() {
        String feature = "[0.3249610348584162,0.3729331410029757]";
        List<Float> featureList = JSON.parseArray(feature, Float.class);
        ArrayList<Float> floats = new ArrayList<>(featureList);
        List<List<Float>> vectors = Collections.singletonList(floats);
        List<QueryResultsWrapper.RowRecord> search = milvusUtils.search((builder) -> {
            builder.withCollectionName("test")
                    // 向量字段
                    .withVectorFieldName("feature")
                    // 向量查询数据
                    .withVectors(vectors)
                    .withOutFields(Arrays.asList("image_id"))
                    .withTopK(10);
        });
        QueryResultsWrapper.RowRecord rowRecord = search.get(0);
        System.out.println(rowRecord);
        return Response.success();
    }

    @RequestMapping(value = "/generate", method = RequestMethod.GET)
    public Response<?> generate(Integer num) {
        String data = "{\"feature\":[-0.31351062655448914,-0.8930796384811401,0.17299924790859222,0.015730123966932297,-0.8590705394744873,0.6556453108787537,-0.5962056517601013,0.7534230351448059,-0.5595108866691589,-0.7106392979621887,0.18706507980823517,-0.41623303294181824,-0.41226065158843994,-0.8858619332313538,-0.4607338607311249,-0.7492433786392212,0.9039558172225952,0.5957711935043335,-0.7817090153694153,0.15803132951259613,0.6064987778663635,-0.9712539911270142,0.37470096349716187,0.06894122064113617,0.9165349006652832,-0.4203922748565674,0.4244048595428467,0.9598206281661987,-0.4670042097568512,-0.4062800705432892,0.10987570881843567,-0.7195901274681091,-0.6128625869750977,0.13150499761104584,0.5929706692695618,0.47908881306648254,-0.15334482491016388,0.4383462965488434,-0.28302237391471863,0.8815432190895081,-0.24591198563575745,0.08908478170633316,-0.588224470615387,-0.1433885097503662,0.17481733858585358,0.6609787344932556,-0.5573566555976868,-0.6822930574417114,-0.18647094070911407,0.7463704347610474,0.5185442566871643,-0.626727283000946,-0.5921575427055359,0.9554688334465027,0.36930230259895325,-0.045610737055540085,-0.6271494030952454,0.45354437828063965,0.11904031783342361,-0.10414142906665802,0.5692946910858154,-0.31639841198921204,-0.05211056396365166,0.1765262335538864,0.9252199530601501,0.2816520929336548,-0.02653750777244568,-0.7656031250953674,-0.3144534230232239,0.8922486901283264,-0.8516228795051575,-0.3903760612010956,0.5980080962181091,0.314800888299942,-0.03988857567310333,-0.15222026407718658,0.3893057405948639,0.1113818809390068,-0.9789409041404724,0.6808230876922607,-0.7741117477416992,-0.7241060733795166,-0.546942412853241,0.21897096931934357,-0.8914883732795715,0.7246040105819702,0.35104361176490784,-0.46970754861831665,-0.13374772667884827,-0.14417970180511475,-0.22089342772960663,-0.4311869144439697,-0.9949682354927063,-0.9372541308403015,-0.26579558849334717,0.5591854453086853,0.9976710081100464,0.9245647192001343,0.06492358446121216,-0.3920890688896179,0.8393502235412598,0.7392651438713074,-0.10685385763645172,0.6078080534934998,-0.4262637495994568,-0.3855059742927551,0.5460326075553894,0.17133300006389618,0.1083739623427391,0.3538103699684143,-0.7214144468307495,0.17903338372707367,-0.5554697513580322,0.30391189455986023,-0.8549404740333557,0.8573128581047058,0.11666112393140793,-0.9321948885917664,0.20267483592033386,-0.3413177728652954,-0.8259667754173279,0.1467554271221161,-0.6414651274681091,-0.2677950859069824,-0.6929734349250793,0.6889589428901672,0.5895782113075256,-0.9852225184440613,0.243367999792099,-0.8330070972442627,0.3961189389228821,0.7863613367080688,0.7522233724594116,-0.7502530813217163,-0.9652404189109802,-0.44880566000938416,0.9100028276443481,0.6094722747802734,0.5062902569770813,0.539034903049469,0.3469107449054718,-0.16671760380268097,-0.9945024251937866,0.04157745838165283,-0.5648511052131653,-0.15437299013137817,0.376197874546051,0.02515518292784691,0.015866965055465698,0.9259341955184937,0.8609129786491394,-0.8065445423126221,-0.4698508381843567,-0.39649978280067444,0.2667083144187927,-0.5339897871017456,0.33365556597709656,0.4854993224143982,-0.18555434048175812,0.7904126048088074,0.19397050142288208,-0.9674843549728394,-0.7290968298912048,-0.2515508532524109,-0.08687234669923782,0.035592954605817795,0.7814621925354004,0.768119215965271,0.6077028512954712,0.13312795758247375,-0.17790958285331726,-0.15942515432834625,-0.18267370760440826,0.4337523281574249,-0.24379049241542816,0.49164485931396484,0.6815462112426758,0.6242167949676514,0.8502984642982483,-0.25382769107818604,0.15731322765350342,-0.9554600715637207,-0.39113542437553406,0.809805154800415,0.015076522715389729,-0.7457592487335205,-0.7927731871604919,-0.3540174961090088,-0.6500349640846252,-0.05386563390493393,-0.30152860283851624,-0.996852695941925,-0.06876824796199799,0.5475865602493286,-0.19122259318828583,-0.006864367518573999,0.10937777161598206,0.5689263939857483,-0.23856474459171295,0.5133891105651855,-0.6358672976493835,-0.44726988673210144,-0.9896848797798157,-0.6717207431793213,-0.5864149332046509,-0.8158236742019653,-0.9772685170173645,-0.757325291633606,-0.7862930297851562,-0.944061279296875,-0.5433574318885803,-0.9238521456718445,-0.07541663199663162,-0.9511755704879761,0.9771648645401001,0.7598723769187927,-0.7548578381538391,0.17682860791683197,-0.7904972434043884,-0.13151513040065765,0.01185612939298153,0.2408287227153778,-0.060042139142751694,0.19390086829662323,-0.9697698950767517,0.9135220646858215,0.06433670967817307,0.9144535064697266,0.6557337045669556,0.18089286983013153,-0.23136623203754425,-0.15366429090499878,-0.948573887348175,-0.9421840906143188,-0.905810534954071,0.35920917987823486,0.6546322703361511,-0.44461220502853394,-0.10791018605232239,-0.4527873992919922,0.407500296831131,0.7202408313751221,0.3671814501285553,0.8055163621902466,0.3154379725456238,-0.1468021422624588,-0.19704335927963257,-0.5227887034416199,0.3936665952205658,-0.8687947988510132,0.1229996383190155,-0.8831258416175842,0.6203291416168213,0.1979924738407135,0.3117843568325043,0.45917317271232605],\"image_id\":196096474,\"image_path\":\"Gg8T3FIyTA4JxT6mHt5eOglN15ZF2xZrSkiY6EFgwo6CrCL65ZZllTxJszAYIcDP2LRgchvJ2EpHsm4FG9NKdsHENBIdDcIZsW\",\"location_client\":[0.6898605223355501,-0.6121630107337037,-0.04602858391976383,-0.2066958196940849],\"location_algorithm\":[-0.07512965213833289,0.6940948482969242,-0.9406337441786179,-0.6733422782139378],\"label\":\"nH3Di92X7TOBtosyAtdvIis7LuMIqSm02nXXG9kHvBSQLq29ltYSnrJXKoheJDv365xO7nohLJAn5qyh8tQ10JeGjHSE6JOlYHNN\",\"remark\":\"8OtNzQM2EKPhwHTOc8GSqULmiaIFhzpL1L0cJYeeJnFG7ffdJosYqSdgZH9PNVQvo5q1AHFo03Q77CipF6hjY55M1ahFAc2loK8tyU0GvzrABWnH933YnMeS8mQDHlPdMLbxr8AFnRPH1zmTIrp4XAooDMxgY7npEdpI96pj716ShJCCEKOf2bpKeqSYfe9mzrF0s9W9bPAyYyxmLJizmY5ZAuIOMWT952EkukB63SxWG68NMp2c9rX\",\"version\":\"hzDNdG46Cf\"}";
        Gson gson = new Gson();
        JsonObject jsonObject = gson.fromJson(data, JsonObject.class);
        StopWatch stopWatch = new StopWatch();
        stopWatch.start();
        Stream.iterate(1, n -> n + 1).parallel().limit(num).forEach(item -> {
            jsonObject.addProperty("id", IdWorker.getId());
            milvusUtils.insert("test", "_default", jsonObject);
        });
        stopWatch.stop();
        return Response.success(stopWatch.getTotalTimeMillis());
    }
}
