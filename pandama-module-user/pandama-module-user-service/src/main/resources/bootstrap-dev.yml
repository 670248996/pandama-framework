spring:
  application:
    name: pandama-user
  cloud:
    nacos:
      config:
        file-extension: yml
        server-addr: 123.60.104.105:8848
      discovery:
        server-addr: 123.60.104.105:8848
        metadata:
          node-name: ${MY_NODE_NAME}
          node-ip: ${MY_NODE_IP}
          pod-ip: ${MY_POD_IP}

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      url: jdbc:mysql://123.60.104.105:3306/pandama_user?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false&rewriteBatchedStatements=true
      username: admin
      password: Admin@123!@#
      #  初始连接数
      initialSize: 5
      # 最小空闲连接数
      minIdle: 5
      # 最大连接数
      maxActive: 50
      # 超时等待时间以毫秒为单位
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      # 检测查询处理
      validationQuery: SELECT 1 FROM DUAL
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      testWhileIdle: true
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      # 生产环境设置为false
      testOnBorrow: true
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      testOnReturn: false
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭
      poolPreparedStatements: true
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，wall用于防火墙
      filters: stat,wall,log4j2
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      maxPoolPreparedStatementPerConnectionSize: 20
      #合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
      # 自己配置监控统计拦截的filter
      filter:
        # 开启状态监控
        stat:
          enabled: true
          db-type: mysql
          # 开启慢sql监控，超过2s 就认为是慢sql，记录到日志中
          log-slow-sql: false
          slow-sql-millis: 2000
        # 日志监控，使用slf4j 进行日志输出
        slf4j:
          enabled: true
          statement-log-error-enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
      ########## 配置WebStatFilter，用于采集web关联监控的数据 ##########
      web-stat-filter:
        # 启动 StatFilter
        enabled: true
        # 过滤所有url
        url-pattern: /*
        # 排除一些不必要的url
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
        # 开启session统计功能
        session-stat-enable: true
        # session的最大个数,默认100
        session-stat-max-count: 1000
      ########## 配置StatViewServlet（监控页面），用于展示Druid的统计信息 ##########
      stat-view-servlet:
        # 启用StatViewServlet
        enabled: true
        # 访问内置监控页面的路径，内置监控页面的首页是/druid/index.html
        url-pattern: /druid/*
        # 不允许清空统计数据,重新计算
        reset-enable: false
        # 配置监控页面的账号和密码
        login-username: admin
        login-password: 123456
        # 允许和拒绝访问的地址，如果allow没有配置或者为空，则允许所有访问；如果在deny列表中，就算在allow列表中，也会被拒绝
        allow:
        deny:

  redis:
    # Redis 连接地址
    host: 123.60.104.105
    # Redis 连接端口
    port: 6379
    # Redis 服务器连接密码
    password: Redis@123!@#
    # Redis 数据库索引
    database: 0
    # 连接超时时间, Unit: 毫秒
    timeout: 60000
    # 集群配置
#    cluster:
#      # 集群所有(主、从)节点地址信息
#      nodes: 123.60.104.105:6379
#      # 重定向的最大次数
#      max-redirects: 3
    # Redis客户端Lettuce配置
    lettuce:
      # 集群配置
#      cluster:
#        refresh:
#          # 使能集群拓扑自适应刷新，默认值：false
#          adaptive: true
#          # 集群拓扑定时刷新周期，Unit：毫秒
#          period: 30000
      # 连接池配置
      pool:
        # 连接时测试连接有效性
        test-on-borrow: true
        # 连接空闲时测试连接的有效性
        pool.test-while-idle: true
        # 连接池最大连接数（使用负值表示没有限制） 默认 8
        max-active: 200
        # 连接池中最小空闲连接
        min-idle: 1
        # 连接池中最大空闲连接
        max-idle: 10
        # 最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
        max-wait: 6000s
        # 空闲链接检测线程检测周期毫秒（负值表示不检测）(类型为Duration，添加秒)
        time-between-eviction-runs: 60s
      # 关闭超时时间
      shutdown-timeout: 1s

#rocketmq:
#  name-server: 123.60.104.105:9876
#  consumer:
#    group: user_consumer_group
#    # 一次拉取消息最大值，注意是拉取消息的最大值而非消费最大值
#    pull-batch-size: 10
#  producer:
#    # 发送同一类消息的设置为同一个group，保证唯一
#    group: user_producer_group
#    # 发送消息超时时间，默认3000
#    sendMessageTimeout: 10000
#    # 发送消息失败重试次数，默认2
#    retryTimesWhenSendFailed: 2
#    # 异步消息重试此处，默认2
#    retryTimesWhenSendAsyncFailed: 2
#    # 消息最大长度，默认1024 * 1024 * 4(默认4M)
#    maxMessageSize: 4096
#    # 压缩消息阈值，默认4k(1024 * 4)
#    compressMessageBodyThreshold: 4096
#    # 是否在内部发送失败时重试另一个broker，默认false
#    retryNextServer: false

mybatis-plus:
  mapper-locations: classpath*:mapper/*.xml

management:
  endpoints:
    web:
      exposure:
        include: "*"
        exclude: env,beans
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
    export:
      prometheus:
        pushgateway:
          #PUSHGATEWAY address
          baseUrl: 10.211.55.4:9091
          # Push cycle
          pushRate: 15s
          #job definition name
          job: ${spring.application.name}
          # Enable push
          enabled: true
          grouping-key:
            group: pandama